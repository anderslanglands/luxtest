#usda 1.0
(
    endTimeCode = 22
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Scope "Render"
{
    def RenderSettings "Settings" (
        prepend apiSchemas = ["KarmaRenderSettingsAPI"]
    )
    {
        custom int arnold:global:AA_samples = 6
        custom bool arnold:global:enable_progressive_render = 1
        custom int arnold:global:GI_total_depth = 0
        rel camera = </cameras/camera1>
        float4 dataWindowNDC = (0, 0, 1, 1)
        token[] includedPurposes = ["default", "render"]
        bool instantaneousShutter = 1
        int karma:global:pathtracedsamples = 64
        int karma:global:samplesperpixel = 9
        custom float karma:object:diffuselimit = 0
        custom float karma:object:reflectlimit = 0
        custom float karma:object:refractlimit = 0
        custom float karma:object:ssslimit = 0
        token[] materialBindingPurposes = ["full", "allPurpose"]
        float pixelAspectRatio = 1
        int2 resolution = (512, 512)
        custom string ri:integrator:name = "PxrDirectLighting"
    }
}

def Scope "materials"
{
    def Material "usdpreviewsurface1"
    {
        token outputs:displacement.connect = </materials/usdpreviewsurface1/usdpreviewsurface1.outputs:displacement>
        token outputs:surface.connect = </materials/usdpreviewsurface1/usdpreviewsurface1.outputs:surface>

        def Shader "usdpreviewsurface1"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 1, 1)
            float inputs:ior = 1
            int inputs:useSpecularWorkflow = 1
            token outputs:displacement
            token outputs:surface
        }
    }
}

def Xform "cameras"
{
    def Camera "camera1" (
        prepend apiSchemas = ["HoudiniCameraPlateAPI", "HoudiniViewportGuideAPI"]
    )
    {
        float2 clippingRange = (0.001, 1000000)
        float exposure = 0
        float focalLength = 0.0001
        float focusDistance = 5
        float fStop = 0
        float horizontalAperture = 0.0002
        float horizontalApertureOffset = 0
        token projection = "perspective"
        double shutter:close = 0
        double shutter:open = 0
        float verticalAperture = 0.0002
        float verticalApertureOffset = 0
        matrix4d xformOp:transform.timeSamples = {
            1: ( (1, 0, 0, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, -0.7071067811865476, 0.7071067811865476, 0), (0, 0, -0.01, 1) ),
            2: ( (1, 0, 0, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, -0.7071067811865476, 0.7071067811865476, 0), (0, 0, -0.01, 1) ),
            3: ( (1, 0, 0, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, -0.7071067811865476, 0.7071067811865476, 0), (0, 0, -0.01, 1) ),
            4: ( (1, 0, 0, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, -0.7071067811865476, 0.7071067811865476, 0), (0, 0, -0.01, 1) ),
            5: ( (1, 0, 0, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, -0.7071067811865476, 0.7071067811865476, 0), (0, 0, -0.01, 1) ),
            6: ( (1, 0, 0, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, -0.7071067811865476, 0.7071067811865476, 0), (0, 0, -0.01, 1) ),
            7: ( (1, 0, 0, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, -0.7071067811865476, 0.7071067811865476, 0), (0, 0, -0.01, 1) ),
            8: ( (1, 0, 0, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, -0.7071067811865476, 0.7071067811865476, 0), (0, 0, -0.01, 1) ),
            9: ( (1, 0, 0, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, -0.7071067811865476, 0.7071067811865476, 0), (0, 0, -0.01, 1) ),
            10: ( (1, 0, 0, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, -0.7071067811865476, 0.7071067811865476, 0), (0, 0, -0.01, 1) ),
            11: ( (1, 0, 0, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, -0.7071067811865476, 0.7071067811865476, 0), (0, 0, -0.01, 1) ),
            12: ( (1, 0, 0, 0), (0, -0.7071067811865475, 0.7071067811865476, 0), (0, -0.7071067811865476, -0.7071067811865475, 0), (0, 0, -0.01, 1) ),
            13: ( (1, 0, 0, 0), (0, -0.7071067811865475, 0.7071067811865476, 0), (0, -0.7071067811865476, -0.7071067811865475, 0), (0, 0, -0.01, 1) ),
            14: ( (1, 0, 0, 0), (0, -0.7071067811865475, 0.7071067811865476, 0), (0, -0.7071067811865476, -0.7071067811865475, 0), (0, 0, -0.01, 1) ),
            15: ( (1, 0, 0, 0), (0, -0.7071067811865475, 0.7071067811865476, 0), (0, -0.7071067811865476, -0.7071067811865475, 0), (0, 0, -0.01, 1) ),
            16: ( (1, 0, 0, 0), (0, -0.7071067811865475, 0.7071067811865476, 0), (0, -0.7071067811865476, -0.7071067811865475, 0), (0, 0, -0.01, 1) ),
            17: ( (1, 0, 0, 0), (0, -0.7071067811865475, 0.7071067811865476, 0), (0, -0.7071067811865476, -0.7071067811865475, 0), (0, 0, -0.01, 1) ),
            18: ( (1, 0, 0, 0), (0, -0.7071067811865475, 0.7071067811865476, 0), (0, -0.7071067811865476, -0.7071067811865475, 0), (0, 0, -0.01, 1) ),
            19: ( (1, 0, 0, 0), (0, -0.7071067811865475, 0.7071067811865476, 0), (0, -0.7071067811865476, -0.7071067811865475, 0), (0, 0, -0.01, 1) ),
            20: ( (1, 0, 0, 0), (0, -0.7071067811865475, 0.7071067811865476, 0), (0, -0.7071067811865476, -0.7071067811865475, 0), (0, 0, -0.01, 1) ),
            21: ( (1, 0, 0, 0), (0, -0.7071067811865475, 0.7071067811865476, 0), (0, -0.7071067811865476, -0.7071067811865475, 0), (0, 0, -0.01, 1) ),
            22: ( (1, 0, 0, 0), (0, -0.7071067811865475, 0.7071067811865476, 0), (0, -0.7071067811865476, -0.7071067811865475, 0), (0, 0, -0.01, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Sphere "sphere_iesTest" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    bool doubleSided = 1
    float3[] extent = [(-100, -100, -100), (100, 100, 100)]
    rel material:binding = </materials/usdpreviewsurface1>
    double radius = 100
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

def Xform "lights"
{
    def SphereLight "iesTest_light" (
        prepend apiSchemas = ["ShapingAPI", "HoudiniViewportLightAPI", "HoudiniViewportGuideAPI", "LightAPI"]
    )
    {
        custom float barndoorbottom = 0
        custom float barndoorbottomedge = 0
        custom float barndoorleft = 0
        custom float barndoorleftedge = 0
        custom float barndoorright = 0
        custom float barndoorrightedge = 0
        custom float barndoortop = 0
        custom float barndoortopedge = 0
        float3[] extent = [(-0.005, -0.005, -0.005), (0.005, 0.005, 0.005)]
        color3f inputs:color = (1, 1, 1)
        float inputs:colorTemperature = 6500
        float inputs:diffuse = 1
        bool inputs:enableColorTemperature = 0
        float inputs:exposure = 1
        float inputs:intensity = 100000000
        bool inputs:normalize = 0
        float inputs:radius = 0.005
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness = 0
        float inputs:shaping:ies:angleScale.timeSamples = {
            1: 0,
            2: 0,
            3: -1,
            4: -0.75,
            5: -0.5,
            6: -0.25,
            7: 2.220446e-16,
            8: 0.25,
            9: 0.5,
            10: 0.75,
            11: 1,
            12: 0,
            13: 0,
            14: -1,
            15: -0.75,
            16: -0.5,
            17: -0.25,
            18: 4.440892e-16,
            19: 0.25,
            20: 0.5,
            21: 0.75,
            22: 1,
        }
        asset inputs:shaping:ies:file.timeSamples = {
            1: @@,
            2: @../test_vertical_bands2.ies@,
            3: @../test_vertical_bands2.ies@,
            4: @../test_vertical_bands2.ies@,
            5: @../test_vertical_bands2.ies@,
            6: @../test_vertical_bands2.ies@,
            7: @../test_vertical_bands2.ies@,
            8: @../test_vertical_bands2.ies@,
            9: @../test_vertical_bands2.ies@,
            10: @../test_vertical_bands2.ies@,
            11: @../test_vertical_bands2.ies@,
            12: @@,
            13: @../test_vertical_bands2.ies@,
            14: @../test_vertical_bands2.ies@,
            15: @../test_vertical_bands2.ies@,
            16: @../test_vertical_bands2.ies@,
            17: @../test_vertical_bands2.ies@,
            18: @../test_vertical_bands2.ies@,
            19: @../test_vertical_bands2.ies@,
            20: @../test_vertical_bands2.ies@,
            21: @../test_vertical_bands2.ies@,
            22: @../test_vertical_bands2.ies@,
        }
        bool inputs:shaping:ies:normalize = 0
        float inputs:specular = 1
        rel light:filters = None
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

