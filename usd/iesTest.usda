#usda 1.0
(
    endTimeCode = 5
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Scope "Render"
{
    def RenderSettings "Settings" (
        prepend apiSchemas = ["KarmaRenderSettingsAPI"]
    )
    {
        custom int arnold:global:AA_samples = 6
        custom bool arnold:global:enable_progressive_render = 1
        custom int arnold:global:GI_total_depth = 0
        rel camera = </cameras/camera1>
        float4 dataWindowNDC = (0, 0, 1, 1)
        token[] includedPurposes = ["default", "render"]
        bool instantaneousShutter = 1
        int karma:global:pathtracedsamples = 64
        int karma:global:samplesperpixel = 9
        custom float karma:object:diffuselimit = 0
        custom float karma:object:reflectlimit = 0
        custom float karma:object:refractlimit = 0
        custom float karma:object:ssslimit = 0
        token[] materialBindingPurposes = ["full", "allPurpose"]
        float pixelAspectRatio = 1
        int2 resolution = (512, 512)
        custom string ri:integrator:name = "PxrDirectLighting"
    }
}

def Xform "cameras"
{
    def Camera "camera1" (
        prepend apiSchemas = ["HoudiniCameraPlateAPI", "HoudiniViewportGuideAPI"]
    )
    {
        float2 clippingRange = (0.00001, 1000000)
        float exposure = 0
        float focalLength = 0.00001
        float focusDistance = 0
        float fStop = 0
        float horizontalAperture = 0.00002
        float horizontalApertureOffset = 0
        token projection = "perspective"
        double shutter:close = 0
        double shutter:open = 0
        float verticalAperture = 0.00002
        float verticalApertureOffset = 0
        matrix4d xformOp:transform.timeSamples = {
            1: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            2: ( (1, 0, 0, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, -0.7071067811865476, 0.7071067811865476, 0), (0, 0, 0, 1) ),
            3: ( (1, -0, 0, 0), (0, -0, 1, 0), (0, -1, 0, 0), (0, -0, 0, 1) ),
            4: ( (1, -0, 0, 0), (0, -0.7071067811865475, 0.7071067811865476, 0), (0, -0.7071067811865476, -0.7071067811865475, 0), (0, -0, 0, 1) ),
            5: ( (1, -0, -0, 0), (0, -1, -0, 0), (0, -0, -1, 0), (0, -0, -0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Sphere "sphere_iesTest"
{
    bool doubleSided = 1
    float3[] extent = [(-100, -100, -100), (100, 100, 100)]
    double radius = 100
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

def Xform "lights"
{
    def SphereLight "iesTest_light" (
        prepend apiSchemas = ["ShapingAPI", "HoudiniViewportLightAPI", "HoudiniViewportGuideAPI", "LightAPI"]
    )
    {
        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
        color3f inputs:color = (1, 1, 1)
        float inputs:colorTemperature = 6500
        float inputs:diffuse = 1
        bool inputs:enableColorTemperature = 0
        float inputs:exposure = 0
        float inputs:intensity = 10000
        bool inputs:normalize = 0
        float inputs:radius = 0.5
        float inputs:shaping:ies:angleScale = 0
        asset inputs:shaping:ies:file = @../test_linear_vertical.ies@
        bool inputs:shaping:ies:normalize = 0
        float inputs:specular = 1
        rel light:filters = None
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

