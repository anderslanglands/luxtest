#usda 1.0
(
    defaultPrim = "sopcreate_iesTest"
    endTimeCode = 31
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Scope "Render"
{
    def RenderSettings "Settings" (
        prepend apiSchemas = ["KarmaRenderSettingsAPI"]
    )
    {
        custom int arnold:global:AA_samples = 6
        custom bool arnold:global:enable_progressive_render = 1
        custom int arnold:global:GI_total_depth = 0
        rel camera = </cameras/camera1>
        float4 dataWindowNDC = (0, 0, 1, 1)
        token[] includedPurposes = ["default", "render"]
        bool instantaneousShutter = 1
        int karma:global:pathtracedsamples = 64
        int karma:global:samplesperpixel = 9
        custom float karma:object:diffuselimit = 0
        custom float karma:object:reflectlimit = 0
        custom float karma:object:refractlimit = 0
        custom float karma:object:ssslimit = 0
        token[] materialBindingPurposes = ["full", "allPurpose"]
        float pixelAspectRatio = 1
        int2 resolution = (512, 512)
        custom string ri:integrator:name = "PxrDirectLighting"
    }
}

def Scope "materials"
{
    def Material "usdpreviewsurface1"
    {
        token outputs:displacement.connect = </materials/usdpreviewsurface1/usdpreviewsurface1.outputs:displacement>
        token outputs:surface.connect = </materials/usdpreviewsurface1/usdpreviewsurface1.outputs:surface>

        def Shader "usdpreviewsurface1"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 1, 1)
            float inputs:ior = 1
            int inputs:useSpecularWorkflow = 1
            token outputs:displacement
            token outputs:surface
        }
    }
}

def Xform "cameras"
{
    def Camera "iesBottom" (
        prepend apiSchemas = ["HoudiniCameraPlateAPI", "HoudiniViewportGuideAPI"]
    )
    {
        float2 clippingRange = (0.001, 1000000)
        float exposure = 0
        float focalLength = 0.0001
        float focusDistance = 5
        float fStop = 0
        float horizontalAperture = 0.0002
        float horizontalApertureOffset = 0
        token projection = "perspective"
        double shutter:close = 0
        double shutter:open = 0
        float verticalAperture = 0.0002
        float verticalApertureOffset = 0
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, -0.7071067811865476, 0.7071067811865476, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "iesTop" (
        prepend apiSchemas = ["HoudiniCameraPlateAPI", "HoudiniViewportGuideAPI"]
    )
    {
        float2 clippingRange = (0.001, 1000000)
        float exposure = 0
        float focalLength = 0.0001
        float focusDistance = 5
        float fStop = 0
        float horizontalAperture = 0.0002
        float horizontalApertureOffset = 0
        token projection = "perspective"
        double shutter:close = 0
        double shutter:open = 0
        float verticalAperture = 0.0002
        float verticalApertureOffset = 0
        matrix4d xformOp:transform = ( (1, -0, 0, 0), (0, -0.7071067811865475, 0.7071067811865476, 0), (0, -0.7071067811865476, -0.7071067811865475, 0), (0, -0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Xform "sopcreate_iesTest" (
    prepend apiSchemas = ["MaterialBindingAPI"]
    kind = "component"
)
{
    rel material:binding = </materials/usdpreviewsurface1>
    matrix4d xformOp:transform:xform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform:xform"]

    def Mesh "mesh_0"
    {
        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 2, 3, 1, 4, 6, 7, 5, 6, 3, 2, 7, 5, 0, 1, 4, 5, 7, 2, 0, 1, 3, 6, 4]
        uniform token orientation = "leftHanded"
        point3f[] points = [(0.5, -0.5, 0.5), (-0.5, -0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, 0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5)] (
            interpolation = "vertex"
        )
        uniform token subdivisionScheme = "catmullClark"
    }
}

def Xform "lights"
{
    def SphereLight "iesTest_light" (
        prepend apiSchemas = ["ShapingAPI", "HoudiniViewportLightAPI", "HoudiniViewportGuideAPI", "LightAPI"]
    )
    {
        custom float barndoorbottom = 0
        custom float barndoorbottomedge = 0
        custom float barndoorleft = 0
        custom float barndoorleftedge = 0
        custom float barndoorright = 0
        custom float barndoorrightedge = 0
        custom float barndoortop = 0
        custom float barndoortopedge = 0
        float3[] extent = [(-0.005, -0.005, -0.005), (0.005, 0.005, 0.005)]
        color3f inputs:color = (1, 1, 1)
        float inputs:colorTemperature = 6500
        float inputs:diffuse = 1
        bool inputs:enableColorTemperature = 0
        float inputs:exposure = 0
        float inputs:intensity = 1000
        bool inputs:normalize = 0
        float inputs:radius = 0.005
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness = 0
        float inputs:shaping:ies:angleScale.timeSamples = {
            1: 0,
            2: -1,
            3: -0.75,
            4: -0.5,
            5: -0.25,
            6: 4.440892e-16,
            7: 0.25,
            8: 0.5,
            9: 0.75,
            10: 1,
            11: 0,
            12: -1,
            13: -0.75,
            14: -0.5,
            15: -0.25,
            16: 0,
            17: 0.25,
            18: 0.5,
            19: 0.75,
            20: 1,
            21: 0,
            22: -1,
            23: -0.75,
            24: -0.5,
            25: -0.25,
            26: 0,
            27: 0.25,
            28: 0.5,
            29: 0.75,
            30: 1,
            31: 0,
        }
        asset inputs:shaping:ies:file.timeSamples = {
            1: @../test_stripes_nonuniform.ies@,
            2: @../test_stripes_nonuniform.ies@,
            3: @../test_stripes_nonuniform.ies@,
            4: @../test_stripes_nonuniform.ies@,
            5: @../test_stripes_nonuniform.ies@,
            6: @../test_stripes_nonuniform.ies@,
            7: @../test_stripes_nonuniform.ies@,
            8: @../test_stripes_nonuniform.ies@,
            9: @../test_stripes_nonuniform.ies@,
            10: @../test_stripes_nonuniform.ies@,
            11: @../test_stripes_uniform.ies@,
            12: @../test_stripes_uniform.ies@,
            13: @../test_stripes_uniform.ies@,
            14: @../test_stripes_uniform.ies@,
            15: @../test_stripes_uniform.ies@,
            16: @../test_stripes_uniform.ies@,
            17: @../test_stripes_uniform.ies@,
            18: @../test_stripes_uniform.ies@,
            19: @../test_stripes_uniform.ies@,
            20: @../test_stripes_uniform.ies@,
            21: @../test_stripes_uniform.ies@,
            22: @../test_stripes_uniform.ies@,
            23: @../test_stripes_uniform.ies@,
            24: @../test_stripes_uniform.ies@,
            25: @../test_stripes_uniform.ies@,
            26: @../test_stripes_uniform.ies@,
            27: @../test_stripes_uniform.ies@,
            28: @../test_stripes_uniform.ies@,
            29: @../test_stripes_uniform.ies@,
            30: @../test_stripes_uniform.ies@,
            31: @@,
        }
        bool inputs:shaping:ies:normalize.timeSamples = {
            1: 0,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            6: 0,
            7: 0,
            8: 0,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 0,
            17: 0,
            18: 0,
            19: 0,
            20: 0,
            21: 1,
            22: 1,
            23: 1,
            24: 1,
            25: 1,
            26: 1,
            27: 1,
            28: 1,
            29: 1,
            30: 1,
            31: 0,
        }
        float inputs:specular = 1
        rel light:filters = None
        bool primvars:arnold:visibility:camera = 0 (
            interpolation = "constant"
        )
        string primvars:karma:object:rendervisibility = "-primary" (
            interpolation = "constant"
        )
        int primvars:ri:attributes:visibility:camera = 0 (
            interpolation = "constant"
        )
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

